{"tagline":"A Super Simple Streaming Protocol for communicating simply.","body":"[![Build Status](https://secure.travis-ci.org/nickpascucci/S3P.png)](http://travis-ci.org/nickpascucci/S3P)\r\n\r\n## libS3P and the Super Simple Streaming Protocol ##\r\n\r\nS3P is an extremely minimal protocol for doing basic communications\r\nover streaming links such as TCP or UART Serial connections. It\r\nprovides packetization and limited error detection functionality, but\r\nnot much more. The benefit of such limited functionality is that the\r\nprotocol is extremely easy to implement and to parse, and has low\r\noverhead making it suitable for embedded applications.\r\n\r\n### Technical Details ###\r\n\r\nAn S3P packet consists of a start marker, a series of data bytes, a\r\nchecksum, and a termination marker. In order to preserve the\r\nuniqueness of the control values, any conflicting values in the body\r\nof the packet are escaped.\r\n\r\nAn example:\r\n\r\n    [0x56][0x01][0x02][0x03][0x06][0x65]\r\n    ^0    ^1    ^2    ^3    ^4    ^5\r\n    \r\n    0: Start Byte\r\n    1: Data 1\r\n    2: Data 2\r\n    3: Data 3\r\n    4: Checksum\r\n    5: Termination Marker\r\n\r\nEscaping is performed by preceding the escaped value with 0x25, and\r\nXOR'ing it with 0x20. Only two values need to be escaped in this way:\r\n0x56 (Start) and 0x25 (Escape). In order to unescape, simply XOR the\r\nvalue with 0x20 again.\r\n\r\nAnother example:\r\n\r\n    [0x56][0x01][0x25][0x26][0x65]\r\n\r\nbecomes\r\n\r\n    [0x56][0x01][0x25][0x05][0x26][0x65]\r\n    ^0    ^1    ^2    ^3    ^4    ^5\r\n\r\n    0: Start Byte\r\n    1: Data 1\r\n    2: Escape Byte\r\n    3: Data 2\r\n    4: Checksum\r\n    5: Termination Marker\r\n\r\nThe checksum is calculated by summing the values of the data bytes,\r\nbut not the start or term bytes, and taking the value MOD 256.\r\n\r\n### API ###\r\n\r\nlibS3P provides a reference implementation, in C, of the S3P\r\nprotocol. It provides two functions: s3p\\_build() and\r\ns3p\\_read(). Their signatures are as follows:\r\n```c\r\n    /**\r\n       Build a new packet from the bytes in \"data\" into \"out\".\r\n    \r\n       S3P packets are limited to 256 bytes of data; attempting to\r\n       packetize more will result in a S3P_PAYLOAD_TOO_LARGE\r\n       error. \"out\" must be at least S3P_OVERHEAD bytes longer than\r\n       the data that needs to be packetized; and this can increase to\r\n       twofold depending on the number of bytes that need escaping. In\r\n       general, unless memory usage is a concern, allocate twice as\r\n       much space as the data you wish to packetize.\r\n    \r\n       Params:\r\n       data: a byte array of data to be packetized.\r\n       dsize: the length of \"data\".\r\n       out: a byte array which will hold the built packet.\r\n       osize: the length of \"out\".\r\n       psize: a pointer to an int which will contain the length of the\r\n       built packet.\r\n    */\r\n    S3P_ERR s3p_build(uint8_t const *data, size_t dsize, uint8_t *out, \r\n                      size_t osize, size_t *psize);\r\n    \r\n    /**\r\n       Read a packet from \"in\", and place unescaped data into \"data\".\r\n        \r\n       Breaking streams into packets is the responsibility of the\r\n       caller. This function will only read the first packet in the\r\n       \"in\" buffer; all other data will be ignored. This function\r\n       guarantees that the length of the data retrieved from the\r\n       packet will be strictly less than the size of the input packet.\r\n          \r\n       Params:\r\n       in: byte array of raw, packetized data.\r\n       isize: the length of \"in\".\r\n       data: byte array which will contain the retrieved data.\r\n       dsize: the length of \"data\".\r\n       psize: pointer to an int which will contain the length of the\r\n       retrieved data.\r\n    */\r\n    S3P_ERR s3p_read(uint8_t const *in, size_t isize, uint8_t *data, \r\n                     size_t dsize, size_t *psize);\r\n```\r\n\r\n`S3P_ERR` is an enum of error conditions, including:\r\n\r\n+ S3P\\_SUCCESS\r\n+ S3P\\_BUF\\_TOO\\_SMALL\r\n+ S3P\\_PAYLOAD\\_TOO\\_LARGE\r\n+ S3P\\_CHECKSUM\\_ERR\r\n+ S3P\\_PARSE\\_FAILURE\r\n\r\n## Improvements\r\n\r\n+ Functions for reading packets from streams and passing them to\r\nuser-provided callbacks would be nice. Portability (especially to\r\nembedded systems) might be an issue.\r\n\r\nAll of the code in this library is provided free of charge and WITHOUT\r\nWARRANTY under the LGPL license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"S3p"}